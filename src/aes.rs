use std::mem::size_of;

enum AESErrors {
    SplittingError,
}
const AES_KEY_SIZE: usize = 128 / 8;
const MATRIX4_ARRAY_SIZE: usize = 4;
const ROUND_COUNT: usize = 10;
const AES_MIX_COLUMNS_MATRIX: [[u8; MATRIX4_ARRAY_SIZE]; MATRIX4_ARRAY_SIZE] =
    [[2, 3, 1, 1], [1, 2, 3, 1], [1, 1, 2, 3], [3, 1, 1, 2]];
const AES_SBOX: [[u8; 16]; 16] = [
    [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab,
        0x76,
    ],
    [
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72,
        0xc0,
    ],
    [
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31,
        0x15,
    ],
    [
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2,
        0x75,
    ],
    [
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f,
        0x84,
    ],
    [
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58,
        0xcf,
    ],
    [
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f,
        0xa8,
    ],
    [
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3,
        0xd2,
    ],
    [
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
        0x73,
    ],
    [
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b,
        0xdb,
    ],
    [
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4,
        0x79,
    ],
    [
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae,
        0x08,
    ],
    [
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b,
        0x8a,
    ],
    [
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d,
        0x9e,
    ],
    [
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28,
        0xdf,
    ],
    [
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb,
        0x16,
    ],
];

const INVERSE_AES_SBOX: [[u8; 16]; 16] = [
    [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7,
        0xfb,
    ],
    [
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9,
        0xcb,
    ],
    [
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3,
        0x4e,
    ],
    [
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1,
        0x25,
    ],
    [
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6,
        0x92,
    ],
    [
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d,
        0x84,
    ],
    [
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45,
        0x06,
    ],
    [
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a,
        0x6b,
    ],
    [
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
        0x73,
    ],
    [
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf,
        0x6e,
    ],
    [
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe,
        0x1b,
    ],
    [
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a,
        0xf4,
    ],
    [
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec,
        0x5f,
    ],
    [
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c,
        0xef,
    ],
    [
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99,
        0x61,
    ],
    [
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c,
        0x7d,
    ],
];
struct Matrix4<T> {
    pub matrix: [[T; MATRIX4_ARRAY_SIZE]; MATRIX4_ARRAY_SIZE],
}
impl<T> Matrix4<T>
where
    T: Default + Copy,
{
    pub fn from_arr(arr: [T; MATRIX4_ARRAY_SIZE * MATRIX4_ARRAY_SIZE]) -> Self {
        let matrix_as_vec: Vec<[T; MATRIX4_ARRAY_SIZE]> = arr
            .chunks(MATRIX4_ARRAY_SIZE)
            .map(|chunk| {
                let mut arr = [T::default(); MATRIX4_ARRAY_SIZE];
                arr.copy_from_slice(chunk);
                arr
            })
            .collect();

        let mut matrix = [[T::default(); MATRIX4_ARRAY_SIZE]; MATRIX4_ARRAY_SIZE];
        matrix.copy_from_slice(&matrix_as_vec);

        Self { matrix }
    }

    pub fn to_arr(&self) -> [T; MATRIX4_ARRAY_SIZE * MATRIX4_ARRAY_SIZE] {
        let mut arr = [T::default(); MATRIX4_ARRAY_SIZE * MATRIX4_ARRAY_SIZE];

        for (i, row) in self.matrix.iter().enumerate() {
            for (j, &value) in row.iter().enumerate() {
                arr[i * MATRIX4_ARRAY_SIZE + j] = value;
            }
        }

        arr
    }
}

fn split_data_to_matrix(data: &Vec<u8>) -> Vec<Matrix4<u8>> {
    data.chunks(MATRIX4_ARRAY_SIZE * MATRIX4_ARRAY_SIZE)
        .map(|chunk| {
            let mut arr = [0u8; MATRIX4_ARRAY_SIZE * MATRIX4_ARRAY_SIZE];
            arr.copy_from_slice(chunk);
            Matrix4::<u8>::from_arr(arr)
        })
        .collect()
}

fn split_byte(byte: &u8) -> (u8, u8) {
    (((byte >> 4) & 0xF).into(), (byte & 0xF).into())
}
fn add_round_key(matrix: &mut Matrix4<u8>, key: &[u8]) {
    matrix
        .matrix
        .iter_mut()
        .zip(key.iter())
        .for_each(|(ma, kb)| ma.iter_mut().for_each(|mb| *mb ^= kb));
}
fn sub_matrix(matrix: &mut Matrix4<u8>) {
    matrix.matrix.iter_mut().for_each(|row| {
        row.iter_mut().for_each(|byte| {
            let (i, j) = split_byte(byte);
            *byte = AES_SBOX[i as usize][j as usize]
        })
    });
}
fn shift_matrix(matrix: &mut Matrix4<u8>) {
    matrix
        .matrix
        .iter_mut()
        .enumerate()
        .for_each(|(shift, arr)| arr.rotate_left(shift))
}

fn galois_multiplication(a: u8, b: u8) -> u8 {
    let mut result = 0;
    let mut a_mut = a;
    let mut b_mut = b;

    for _ in 0..8 {
        if b_mut & 1 == 1 {
            result ^= a_mut;
        }

        let high_bit_set = a_mut & 0x80 != 0;
        a_mut <<= 1;

        if high_bit_set {
            a_mut ^= 0x1B;
        }

        b_mut >>= 1;
    }

    result
}

fn mix_matrix(matrix: &mut Matrix4<u8>) {
    (0..MATRIX4_ARRAY_SIZE).for_each(|i| {
        let temp: Vec<u8> = (0..MATRIX4_ARRAY_SIZE)
            .map(|j| matrix.matrix[j][i])
            .collect();

        (0..MATRIX4_ARRAY_SIZE).for_each(|j| {
            matrix.matrix[j][i] = (0..MATRIX4_ARRAY_SIZE)
                .map(|k| galois_multiplication(temp[k], AES_MIX_COLUMNS_MATRIX[j][k]))
                .fold(0, |acc, val| acc ^ val);
        });
    });
}

fn matrix_aes_encrypt(matrix: &mut Matrix4<u8>, key: &[u8]) {
    let mut offset = 0;
    add_round_key(matrix, &key[0..MATRIX4_ARRAY_SIZE]);

    for i in 0..ROUND_COUNT {
        sub_matrix(matrix);
        shift_matrix(matrix);
        mix_matrix(matrix);
        add_round_key(matrix, &key[i * 4..(i + 1) * 4]);
    }

    sub_matrix(matrix);
    shift_matrix(matrix);
    add_round_key(
        matrix,
        &key[ROUND_COUNT * MATRIX4_ARRAY_SIZE..(ROUND_COUNT + 1) * MATRIX4_ARRAY_SIZE],
    );
}

fn aes_encrypt(data: &Vec<u8>, key: &[u8]) -> Vec<u8> {
    split_data_to_matrix(data).iter_mut().map(|matrix| {
        matrix_aes_encrypt(matrix, key);
        matrix.to_arr()
    }).flatten().collect()
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_aes_encrpyt() {
        let key = [
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ];

        // Define a 128-bit block of data
        let data = [
            0x32, 0x88, 0x31, 0xe0, 0x43, 0x5a, 0x31, 0x37, 0xf6, 0x30, 0x98, 0x07, 0xa8, 0x8d,
            0xa2, 0x34,
        ];

        println!("{:?}", aes_encrypt(&data.to_vec(), &key))
    }
}
